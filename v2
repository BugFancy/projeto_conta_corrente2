# Criação de uma lista para armazenar os usuários
usuarios = []

def criar_usuario(nome, cpf, endereco):
    usuario = {"nome": nome, "cpf": cpf, "endereco": endereco}
    usuarios.append(usuario)
    print(f"Usuário {nome} criado com sucesso!")

def criar_conta_corrente(cpf):
    for usuario in usuarios:
        if usuario["cpf"] == cpf:
            saldo = 0
            limite = 500
            extrato = ""
            numeros_saques = 0
            LIMITES_SAQUES = 3
            usuario["conta_corrente"] = {"saldo": saldo, "limite": limite, "extrato": extrato, "numeros_saques": numeros_saques, "LIMITES_SAQUES": LIMITES_SAQUES}
            print(f"Conta corrente criada para o usuário {usuario['nome']} com sucesso!")
            return
    print(f"Usuário com CPF {cpf} não encontrado.")

# Adicionando usuário
nome = input("Informe o nome: ")
cpf = input("Informe o CPF: ")
endereco = input("Informe o endereco: ")
criar_usuario(nome, cpf, endereco)

# Criando conta corrente
cpf = input("Informe o CPF para criar a conta corrente: ")
criar_conta_corrente(cpf)

def criar_usuario(nome, cpf, endereco):
    usuarios = []
    for usuario in usuarios:
        if usuario['cpf'] == cpf:
            return "Falha. Já existe um usuário com este CPF."
    usuarios.append({'nome': nome, 'cpf': cpf, 'endereco': endereco})
    return "Usuário criado com sucesso!"

def criar_conta_corrente(numero, usuario):
    contas = []
    for conta in contas:
        if conta['numero'] == numero:
            return "Falha. Já existe uma conta com este número."
    contas.append({'numero': numero, 'saldo': 0, 'limite': 500, 'extrato': "", 'numeros_saques': 0, 'LIMITES_SAQUES': 3, 'usuario': usuario})
    return "Conta corrente criada com sucesso!"


class ContaBancaria:
    def __init__(self, nome_titular, numero_conta, saldo = 0.0):
        self.nome_titular = nome_titular
        self.numero_conta = numero_conta
        self.saldo = saldo

    def depositar(self, valor):
        self.saldo += valor
        print(f'Depósito de R${valor:.2f} efetuado com sucesso.')

    def sacar(self, valor):
        if valor > self.saldo:
            print('Saldo insuficiente.')
        else:
            self.saldo -= valor
            print(f'Saque de R${valor:.2f} efetuado com sucesso.')

    def ver_saldo(self):
        print(f'Saldo atual: R${self.saldo:.2f}')

class CPF:
    def __init__(self, cpf):
        self.cpf = cpf
        self.cpfs = []

    def add_cpf(self):
        if self.cpf not in self.cpfs:
            self.cpfs.append(self.cpf)
        else:
            raise ValueError("CPF já cadastrado.")


nome = input("Informe o nome do titular da conta: ")
cpf = input("Informe o CPF do titular da conta: ")
numero_conta = input("Informe o número da conta: ")

cpf = CPF(cpf)
try:
    cpf.add_cpf()
except ValueError as v:
    print(v)

conta = ContaBancaria(nome, numero_conta)

while True:
    opcao = input("""
    [1] Depositar
    [2] Sacar
    [3] Ver saldo
    [0] Sair
    """)

    if opcao == '1':
        valor = float(input("Informe o valor a ser depositado: "))
        conta.depositar(valor)
    elif opcao == '2':
        valor = float(input("Informe o valor a ser sacado: "))
        conta.sacar(valor)
    elif opcao == '3':
        conta.ver_saldo()
    elif opcao == '0':
        break
    else:
        print("Opção inválida.")
